DROP TABLE IF EXISTS GENRES, MPA, FRIENDSHIP_STATUS, PUBLIC.DIRECTORS, FILMS, USERS, FILM_GENRES, FILM_SCORE,
    LIST_OF_FRIENDS, REVIEWS, PUBLIC.REVIEWS_LIKES, PUBLIC.FILM_DIRECTOR, EVENT_TYPE, OPERATION_FOR_FEEDS, FEEDS;

CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER AUTO_INCREMENT PRIMARY KEY,
    GENRE_NAME VARCHAR_IGNORECASE NOT NULL
);

CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID   INTEGER AUTO_INCREMENT PRIMARY KEY,
    MPA_NAME VARCHAR_IGNORECASE NOT NULL
);

CREATE TABLE IF NOT EXISTS FRIENDSHIP_STATUS
(
    FRIENDSHIP_STATUS_ID     INTEGER AUTO_INCREMENT PRIMARY KEY,
    "Friendship_status_name" VARCHAR_IGNORECASE NOT NULL
);

CREATE TABLE IF NOT EXISTS PUBLIC.DIRECTORS
(
    DIRECTOR_ID   INTEGER AUTO_INCREMENT PRIMARY KEY,
    DIRECTOR_NAME VARCHAR NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID      INTEGER AUTO_INCREMENT PRIMARY KEY,
    NAME         VARCHAR_IGNORECASE(256) NOT NULL,
    DESCRIPTION  VARCHAR_IGNORECASE(200),
    RELEASE_DATE DATE,
    DURATION     INTEGER                 NOT NULL,
    RATING_ID    INTEGER REFERENCES MPA (MPA_ID),
    CONSTRAINT CHECK_FILM UNIQUE (NAME, RELEASE_DATE, DESCRIPTION)
);

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID  INTEGER AUTO_INCREMENT PRIMARY KEY,
    NAME     VARCHAR_IGNORECASE(256),
    LOGIN    VARCHAR_IGNORECASE(256) NOT NULL,
    EMAIL    VARCHAR_IGNORECASE(256) NOT NULL UNIQUE,
    BIRTHDAY DATE                    NOT NULL
);

CREATE TABLE IF NOT EXISTS FILM_GENRES
(
    FILM_ID  INTEGER NOT NULL REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    GENRE_ID INTEGER NOT NULL REFERENCES GENRES (GENRE_ID) ON DELETE CASCADE,
    CONSTRAINT FILM_GENRES_PK PRIMARY KEY (FILM_ID, GENRE_ID)
);

CREATE TABLE IF NOT EXISTS FILM_SCORE
(
    FILM_ID INTEGER NOT NULL REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    USER_ID INTEGER NOT NULL REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    SCORE INTEGER,
    CONSTRAINT FILM_LIKES_PK PRIMARY KEY (FILM_ID, USER_ID),
    CONSTRAINT SCORE_CHECK CHECK (SCORE > 0 AND SCORE <= 10)
);

CREATE TABLE IF NOT EXISTS LIST_OF_FRIENDS
(
    FRIEND_ID            INTEGER NOT NULL REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    USER_ID              INTEGER NOT NULL REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    FRIENDSHIP_STATUS_ID INTEGER NOT NULL REFERENCES FRIENDSHIP_STATUS (FRIENDSHIP_STATUS_ID) ON DELETE CASCADE,
    CONSTRAINT LIST_OF_FRIENDS_PK PRIMARY KEY (USER_ID, FRIEND_ID),
    CONSTRAINT CHECK_NAME CHECK ("USER_ID" <> "FRIEND_ID")
);

CREATE TABLE IF NOT EXISTS REVIEWS
(
    REVIEW_ID   INTEGER AUTO_INCREMENT PRIMARY KEY,
    CONTENT     VARCHAR NOT NULL,
    USER_ID     INTEGER NOT NULL REFERENCES PUBLIC.USERS (USER_ID) ON DELETE CASCADE,
    FILM_ID     INTEGER NOT NULL REFERENCES PUBLIC.FILMS (FILM_ID) ON DELETE CASCADE,
    IS_POSITIVE BOOLEAN NOT NULL,
    CONSTRAINT REVIEWS_UNIQUE UNIQUE (USER_ID, FILM_ID, CONTENT)
);

CREATE TABLE IF NOT EXISTS PUBLIC.REVIEWS_LIKES
(
    USER_ID   INTEGER NOT NULL REFERENCES USERS (USER_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    REVIEW_ID INTEGER NOT NULL REFERENCES PUBLIC.REVIEWS (REVIEW_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    USEFUL    INTEGER NOT NULL,
    CONSTRAINT REVIEWS_LIKES_PK PRIMARY KEY (USER_ID, REVIEW_ID),
    CONSTRAINT CHECK_LIKES CHECK ("USEFUL" IN (1, -1))
);

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_DIRECTOR
(
    FILM_ID     INTEGER NOT NULL REFERENCES PUBLIC.FILMS ON DELETE CASCADE,
    DIRECTOR_ID INTEGER NOT NULL REFERENCES PUBLIC.DIRECTORS ON DELETE CASCADE,
    PRIMARY KEY (DIRECTOR_ID, FILM_ID)
);

CREATE TABLE IF NOT EXISTS EVENT_TYPE
(
    EVENT_TYPE_ID INTEGER AUTO_INCREMENT PRIMARY KEY,
    EVENT_TYPE    VARCHAR NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS OPERATION_FOR_FEEDS
(
    OPERATION_ID INTEGER AUTO_INCREMENT PRIMARY KEY,
    OPERATION    VARCHAR NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS FEEDS
(
    EVENT_ID      INTEGER AUTO_INCREMENT PRIMARY KEY,
    TIMESTAMP     TIMESTAMP,
    USER_ID       INTEGER REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    ENTITY_ID     INTEGER,
    EVENT_TYPE_ID INTEGER REFERENCES EVENT_TYPE (EVENT_TYPE_ID) ON DELETE CASCADE,
    OPERATION_ID  INTEGER REFERENCES OPERATION_FOR_FEEDS (OPERATION_ID) ON DELETE CASCADE
);